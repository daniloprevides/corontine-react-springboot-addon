{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) {\n    if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  }\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar style_it_1 = __importDefault(require(\"style-it\"));\n/**\n * Wrapper component for exposing styles\n * @param props React props - contains styles to be injected\n */\n\n\nvar Styled = function Styled(props) {\n  var styles = props.styles.toString();\n  var formattedStyles = exports.stripCommentsAndSelectors(styles);\n  var withFallbacks = exports.addVariableFallbacks(formattedStyles);\n  return style_it_1.default.it(withFallbacks, props.children);\n};\n\nexports.Styled = Styled;\n/**\n * HOC for exposing styles\n * Can be used instead of <Styled> wrapper component\n * @param styles styles to be injected\n */\n\nvar withStyles = function withStyles(styles) {\n  return function (WrappedComponent) {\n    return (\n      /** @class */\n      function (_super) {\n        __extends(class_1, _super);\n\n        function class_1() {\n          return _super !== null && _super.apply(this, arguments) || this;\n        }\n\n        class_1.prototype.render = function () {\n          return react_1.default.createElement(Styled, {\n            styles: styles\n          }, react_1.default.createElement(\"div\", null, react_1.default.createElement(WrappedComponent, __assign({}, this.props))));\n        };\n\n        return class_1;\n      }(react_1.Component)\n    );\n  };\n};\n\nexports.withStyles = withStyles;\n/**\n * Strips away warning comment at the top\n * @param styles styles to strip comments from\n */\n\nexports.stripCommentsAndSelectors = function (styles) {\n  var placeholderComment = \"\\n    /*\\n    * -\\n    */\\n  \";\n  var stylesWithoutComments = styles.replace(/\\/\\*([^*]|[\\r\\n]|(\\*+([^*/]|[\\r\\n])))*\\*\\/+/gm, placeholderComment);\n  return stylesWithoutComments;\n};\n/**\n * Adds css variable fallback for legacy browsers\n * @param styles styles to add fallback to\n */\n\n\nexports.addVariableFallbacks = function (styles) {\n  var stylesWithoutRootSelector = styles.replace(/:root/g, '');\n  var variableMap = new Map();\n  var originalCssLines = stylesWithoutRootSelector.split('\\n');\n  var newCssLines = [];\n  originalCssLines.forEach(function (cssLine) {\n    if (cssLine.trim().substring(0, 2) === '--') {\n      var keyValueSplit = cssLine.trim().split(':');\n      variableMap.set(keyValueSplit[0], keyValueSplit[1].replace(';', ''));\n    }\n  });\n  originalCssLines.forEach(function (cssLine) {\n    if (cssLine.includes('var')) {\n      var lineWithoutSemiColon = cssLine.replace(';', '');\n      var varName = lineWithoutSemiColon.substring(lineWithoutSemiColon.indexOf('var(') + 4, lineWithoutSemiColon.length - 1);\n      var varValue = variableMap.get(varName);\n      var lineWithValue = lineWithoutSemiColon.replace(\"var(\" + varName + \")\", varValue) + \";\";\n      newCssLines.push(lineWithValue);\n    }\n\n    newCssLines.push(cssLine);\n  });\n  return newCssLines.join('\\n');\n};","map":null,"metadata":{},"sourceType":"script"}