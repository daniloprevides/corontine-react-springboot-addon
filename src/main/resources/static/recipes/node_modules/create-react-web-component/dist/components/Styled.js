"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var style_it_1 = __importDefault(require("style-it"));
/**
 * Wrapper component for exposing styles
 * @param props React props - contains styles to be injected
 */
var Styled = function (props) {
    var styles = props.styles.toString();
    var formattedStyles = exports.stripCommentsAndSelectors(styles);
    var withFallbacks = exports.addVariableFallbacks(formattedStyles);
    return style_it_1.default.it(withFallbacks, props.children);
};
exports.Styled = Styled;
/**
 * HOC for exposing styles
 * Can be used instead of <Styled> wrapper component
 * @param styles styles to be injected
 */
var withStyles = function (styles) { return function (WrappedComponent) {
    return /** @class */ (function (_super) {
        __extends(class_1, _super);
        function class_1() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        class_1.prototype.render = function () {
            return (react_1.default.createElement(Styled, { styles: styles },
                react_1.default.createElement("div", null,
                    react_1.default.createElement(WrappedComponent, __assign({}, this.props)))));
        };
        return class_1;
    }(react_1.Component));
}; };
exports.withStyles = withStyles;
/**
 * Strips away warning comment at the top
 * @param styles styles to strip comments from
 */
exports.stripCommentsAndSelectors = function (styles) {
    var placeholderComment = "\n    /*\n    * -\n    */\n  ";
    var stylesWithoutComments = styles.replace(/\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*\/+/gm, placeholderComment);
    return stylesWithoutComments;
};
/**
 * Adds css variable fallback for legacy browsers
 * @param styles styles to add fallback to
 */
exports.addVariableFallbacks = function (styles) {
    var stylesWithoutRootSelector = styles.replace(/:root/g, '');
    var variableMap = new Map();
    var originalCssLines = stylesWithoutRootSelector.split('\n');
    var newCssLines = [];
    originalCssLines.forEach(function (cssLine) {
        if (cssLine.trim().substring(0, 2) === '--') {
            var keyValueSplit = cssLine.trim().split(':');
            variableMap.set(keyValueSplit[0], keyValueSplit[1].replace(';', ''));
        }
    });
    originalCssLines.forEach(function (cssLine) {
        if (cssLine.includes('var')) {
            var lineWithoutSemiColon = cssLine.replace(';', '');
            var varName = lineWithoutSemiColon.substring(lineWithoutSemiColon.indexOf('var(') + 4, lineWithoutSemiColon.length - 1);
            var varValue = variableMap.get(varName);
            var lineWithValue = lineWithoutSemiColon.replace("var(" + varName + ")", varValue) + ";";
            newCssLines.push(lineWithValue);
        }
        newCssLines.push(cssLine);
    });
    return newCssLines.join('\n');
};
