"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inquirer_1 = __importDefault(require("inquirer"));
var fs_1 = __importDefault(require("fs"));
var ncp_1 = __importDefault(require("ncp"));
var mkdirp_1 = __importDefault(require("mkdirp"));
var chalk_1 = __importDefault(require("chalk"));
var path_1 = require("path");
var utils_1 = require("../utils/utils");
function createProject() {
    return __awaiter(this, void 0, void 0, function () {
        var options, names, language, projectDirectory, finishedMessage;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, promptForQuestions()];
                case 1:
                    options = _a.sent();
                    names = {
                        title: utils_1.toTitleFormat(options.name),
                        pascal: utils_1.toPascalCase(options.name),
                        snake: utils_1.toSnakeCase(options.name),
                    };
                    return [4 /*yield*/, promptForLanguage()];
                case 2:
                    language = _a.sent();
                    return [4 /*yield*/, copyTemplate(options.directory, language.language)];
                case 3:
                    projectDirectory = _a.sent();
                    return [4 /*yield*/, writeComponentName(projectDirectory, names, language.language)];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, writeProjectDescription(projectDirectory, options.description)];
                case 5:
                    _a.sent();
                    finishedMessage = "\n\n    Your project is ready!\n    To get started:\n\n      cd " + options.directory + "\n      yarn install\n      yarn start\n\n    The project will be running at: " + chalk_1.default.magenta('localhost:3000') + "\n\n  ";
                    console.log(chalk_1.default.greenBright(finishedMessage));
                    return [2 /*return*/];
            }
        });
    });
}
exports.default = createProject;
function promptForQuestions() {
    return __awaiter(this, void 0, void 0, function () {
        var questions, options;
        return __generator(this, function (_a) {
            questions = [
                {
                    type: 'input',
                    name: 'directory',
                    message: 'Choose a directory name for your project:',
                    validate: function (value) {
                        var pass = /^[a-zA-Z0-9-_]+$/.test(value);
                        if (pass) {
                            return true;
                        }
                        return 'Please enter a valid directory name';
                    },
                },
                {
                    type: 'input',
                    name: 'name',
                    message: 'Choose a name for your component',
                    default: function (current) { return utils_1.createDefaultName(current.directory); },
                    validate: function (value) {
                        var pass = /(\w+-)+\w+/.test(value);
                        if (pass) {
                            return true;
                        }
                        return 'Name must be snake-case and must contain at least two words';
                    },
                },
                {
                    type: 'input',
                    name: 'description',
                    message: 'Give your component a description (optional)',
                },
            ];
            console.log('');
            options = inquirer_1.default.prompt(questions);
            return [2 /*return*/, options];
        });
    });
}
function promptForLanguage() {
    return __awaiter(this, void 0, void 0, function () {
        var questions;
        return __generator(this, function (_a) {
            questions = [
                {
                    type: 'list',
                    name: 'language',
                    message: 'Which language do you want to use?',
                    choices: [
                        {
                            value: 'js',
                            name: 'JavaScript',
                        },
                        {
                            value: 'ts',
                            name: 'TypeScript',
                        },
                    ],
                },
            ];
            console.log('');
            return [2 /*return*/, inquirer_1.default.prompt(questions)];
        });
    });
}
function copyTemplate(projectName, language) {
    return __awaiter(this, void 0, void 0, function () {
        var currentDirectory, templateDirectory, projectDirectory;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    currentDirectory = process.cwd();
                    templateDirectory = fs_1.default.realpathSync(path_1.resolve(__dirname, "../../templates/" + language));
                    return [4 /*yield*/, new Promise(function (resolve, reject) {
                            var projectDir = currentDirectory + "/" + projectName;
                            mkdirp_1.default(projectDir, function (err) {
                                if (err) {
                                    reject('Could not create directory: ' + projectDir);
                                }
                                resolve(projectDir);
                            });
                        })];
                case 1:
                    projectDirectory = _a.sent();
                    return [4 /*yield*/, new Promise(function (resolve, reject) {
                            ncp_1.default.ncp(templateDirectory, projectDirectory, function (err) {
                                if (err) {
                                    reject('Could not copy template files');
                                }
                                resolve();
                            });
                        })];
                case 2:
                    _a.sent();
                    return [2 /*return*/, projectDirectory];
            }
        });
    });
}
function writeComponentName(projectDirectory, names, language) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/public/index.html", new RegExp(/%component-name-title%/g), names.title)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/public/index.html", new RegExp(/%component-name-snake%/g), names.snake)];
                case 2:
                    _a.sent();
                    return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/package.json", new RegExp(/%component-name-snake%/g), names.snake)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/README.md", new RegExp(/%component-name-title%/g), names.title)];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/README.md", new RegExp(/%component-name-snake%/g), names.snake)];
                case 5:
                    _a.sent();
                    if (!(language === 'js')) return [3 /*break*/, 8];
                    return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/src/index.js", new RegExp(/%component-name-snake%/g), names.snake)];
                case 6:
                    _a.sent();
                    return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/src/componentProperties.js", new RegExp(/%component-name-title%/g), names.title)];
                case 7:
                    _a.sent();
                    _a.label = 8;
                case 8:
                    if (!(language === 'ts')) return [3 /*break*/, 11];
                    return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/src/index.tsx", new RegExp(/%component-name-snake%/g), names.snake)];
                case 9:
                    _a.sent();
                    return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/src/componentProperties.ts", new RegExp(/%component-name-title%/g), names.title)];
                case 10:
                    _a.sent();
                    _a.label = 11;
                case 11: return [2 /*return*/];
            }
        });
    });
}
function writeProjectDescription(projectDirectory, description) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/README.md", new RegExp(/%component-description%/g), description)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, utils_1.changeNameInfile(projectDirectory + "/package.json", new RegExp(/%component-description%/g), description)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
